(in-package :dgw)

(defmethod render-playhead ((self time-ruler-mixin))
  (let* ((draw-list (ig:get-window-draw-list))
         (window-pos (ig:get-window-pos))
         (x (time-to-local-x self (.play-start *project*)))
         (pos1 (@+ (@ x .0) window-pos))
         (pos2 (@+ pos1 (@ .0 (ig:get-window-height)))))
    (ig:add-line draw-list pos1 pos2 (.color-playhead *theme*))))

(defmethod render-time-ruler ((self time-ruler-mixin))
  (loop with draw-list = (ig:get-window-draw-list)
        with window-pos = (ig:get-window-pos)
        with window-size = (ig:get-window-size)
        with scroll-x = (ig:get-scroll-x)
        with scroll-y = (ig:get-scroll-y)
        with time-ruler-threshold = (.time-ruler-threshold self)
        with x-last = (- time-ruler-threshold)
        for bar from 0
        for x = (+ (* bar 4 (.zoom-x self))
                   (.offset-x self))
        for cursor-pos = (list x scroll-y)
        if (<= (.time-ruler-threshold self)
               (- x x-last))
          do (setf x-last x)
             (cond ((<= (+ scroll-x (.x window-size)) (.x cursor-pos))
                    (ig:set-cursor-pos (@+ cursor-pos (@ 100.0 .0)))
                    (ig:text " ")
                    (loop-finish))
                   ((<= (+ (.offset-x self) scroll-x) (.x cursor-pos))
                    (ig:set-cursor-pos cursor-pos)
                    (ig:text (format nil " ~d" (1+ bar)))
                    (let* ((p1 (@+ cursor-pos window-pos (@ (- scroll-x) (- scroll-y))))
                           (p2 (@+ p1 (@ 0.0 (.y window-size)))))
                      (when (<= (+ (.offset-x self) (.x window-pos)) (.x p1))
                        (ig:add-line draw-list p1 p2 (.color-line *theme*)))))))

  (render-playhead self))
