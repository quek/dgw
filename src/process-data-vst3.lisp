(in-package :utaticl.core)

(defmethod initialize-instance :after ((self process-data-vst3)
                                       &key (audio-input-bus-count 1)
                                         (audio-output-bus-count 1))
  (let ((wrap (autowrap:alloc '(:struct (sb:vst-process-data))))
        (inputs (make-instance 'audio-bus-buffers :nbuses audio-input-bus-count))
        (outputs (make-instance 'audio-bus-buffers :nbuses audio-output-bus-count))
        (input-events (make-instance 'vst3-impl::event-list))
        (output-events (make-instance 'vst3-impl::event-list))
        (context (autowrap:calloc '(:struct (sb:vst-process-context)))))
    (setf (.wrap self) wrap)
    (setf (sb:vst-process-data.process-mode wrap)
          sb:+vst-process-modes-k-realtime+)
    (setf (sb:vst-process-data.symbolic-sample-size wrap)
          sb:+vst-symbolic-sample-sizes-k-sample32+)
    (setf (sb:vst-process-data.num-samples wrap)
          (.frames-per-buffer *config*))

    (setf (.inputs self) inputs)
    (setf (sb:vst-process-data.num-inputs wrap) audio-input-bus-count)
    (setf (sb:vst-process-data.inputs wrap) (.ptr inputs))
    (setf (.outputs self) outputs)
    (setf (sb:vst-process-data.num-outputs wrap) audio-output-bus-count)
    (setf (sb:vst-process-data.outputs wrap) (.ptr outputs))

    (setf (.input-events self) input-events)
    (setf (sb:vst-process-data.input-events wrap) (vst3-impl::ptr input-events))
    (setf (.output-events self) output-events)
    (setf (sb:vst-process-data.output-events wrap) (vst3-impl::ptr output-events))

    (setf (.context self) context)
    (setf (sb:vst-process-data.process-context wrap) (autowrap:ptr context))
    (setf (sb:vst-process-context.state context) 0)
    (setf (sb:vst-process-context.sample-rate context) (.sample-rate *config*))
    (setf (sb:vst-process-context.time-sig-numerator context) 4)
    (setf (sb:vst-process-context.time-sig-denominator context) 4)

    (sb-ext:finalize self (lambda ()
                            (log:trace "process-data finalize free" wrap)
                            (autowrap:free context)
                            (autowrap:free wrap)
                            (vst3-impl::release input-events)
                            (vst3-impl::release output-events)))))
